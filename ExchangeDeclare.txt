	err = rabbit.Ch.ExchangeDeclare(
		xname, // name 自定义的名称
		xtype, // type 类型："topic" "direct" "fanout" "headers"
		false, // durable 持久性
		false, // auto-deleted
		false, // internal
		false, // no-wait
		nil,   // arguments
	)

ExchangeDeclare在服务器上声明一个交换机。如果交换机不存在，服务器将创建它。如果交换机已经存在，服务器会验证它的类型、持久性和自动删除标志。

该方法返回的错误会关闭通道。

以"amq."开头的交换机名称被保留用于预定义和标准化的交换机。如果设置了passive选项，或者交换机已经存在，客户端可以声明以"amq."开头的交换机。
名称可以由字母、数字、连字符、下划线、句点或冒号的非空序列组成。

每个交换机属于服务器实现的一组交换机种类/类型之一。交换机类型定义了交换机的功能，即消息如何通过它进行路由。一旦交换机被声明，其类型就不能更改。
常见的类型包括"direct"（直连）、"fanout"（扇出）、"topic"（主题）和"headers"（头部）。

持久性和非自动删除的交换机将在服务器重启后继续存在，并在没有剩余绑定时保持声明状态。这是稳定路由和默认交换机等长期存在的最佳选择。

非持久性和自动删除的交换机将在没有剩余绑定时被删除，并在服务器重启后不会恢复。这种生命周期适用于在故障或消费者完成后不应污染虚拟主机的临时拓扑结构。

非持久性和非自动删除的交换机将在服务器运行期间保持存在，包括在没有剩余绑定时。这对于可能在绑定之间存在较长延迟的临时拓扑结构很有用。

持久性和自动删除的交换机将在服务器重启前后保持存在，并在没有剩余绑定时被删除。这些交换机适用于健壮的临时拓扑结构，或者当您需要将持久性队列绑定到自动删除的交换机时。

注意：RabbitMQ将默认的交换机类型（如'amq.fanout'）声明为持久性，因此绑定到这些预定义交换机的队列也必须是持久性的。

声明为"internal"的交换机不接受发布消息。内部交换机在您希望实现不应暴露给代理的交换机拓扑结构时非常有用。

当noWait参数为true时，声明将不等待来自服务器的确认。由于错误的原因，通道可能被关闭。可以添加NotifyClose监听器来响应任何异常。

可以发送特定于服务器实现的交换机参数的可选amqp.Table，这对于需要额外参数的交换机类型非常有用。